#include <Arduboy2.h>

extern Arduboy2 arduboy;

extern int height;
extern int width;

const uint8_t PROGMEM mountains[] = {
128, 32,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x78, 0xee, 0xf2, 0xfd, 0xff, 0xf2, 0x64, 0xe8, 0xf8, 0xf0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0xf0, 0xf0, 0x50, 0x70, 0xb0, 0xb0, 0xb0, 0x30, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xe0, 0xa0, 0xa0, 0xe0, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x78, 0xec, 0xf7, 0xff, 0xfd, 0xff, 0xcf, 0xff, 0xff, 0x9f, 0xff, 0xfd, 0xff, 0xff, 0xfb, 0xff, 0xf8, 0xc0, 0x00, 0x80, 0xc0, 0xf0, 0x98, 0xfc, 0xff, 0xf9, 0xfc, 0xff, 0xff, 0x8e, 0x3e, 0xfc, 0xd0, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xfc, 0x7f, 0xf7, 0xfe, 0xff, 0xf8, 0xfe, 0x5f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xab, 0x5c, 0x60, 0x40, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xc0, 0xe0, 0xb0, 0xe8, 0xe4, 0x6f, 0xe9, 0xff, 0xfa, 0xfe, 0xff, 0xcf, 0xfb, 0xde, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xbc, 0xf0, 0xc0, 0xb0, 0x5a, 0x7b, 0xec, 0xc7, 0xd5, 0x2d, 0x9f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x8f, 0xe2, 0xfc, 0xf1, 0xff, 0xbf, 0xf7, 0xf3, 0xf9, 0xdf, 0xdf, 0xff, 0xff, 0xff, 0xfc, 0xf9, 0xff, 0xfe, 0xfc, 0xf9, 0xfa, 0xf4, 0x88, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0xe0, 0xb0, 0x90, 0xf8, 0xf8, 0xec, 0xe6, 0x77, 0xff, 0x7e, 0x94, 0xde, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xec, 0xef, 0x73, 0xff, 0x7f, 0x7f, 0xff, 0xdf, 0xbf, 0xfd, 0xf8, 0xf7, 0xe1, 0xcb, 0x22, 0xa8, 0x70, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xc0, 0xff, 0x23, 0x5c, 0x0f, 0x0f, 0x24, 0x03, 0x07, 0x07, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfd, 0xcf, 0x3f, 0xf8, 0xe3, 0x8f, 0x3e, 0x5c, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xc3, 0xfc, 0xff, 0xe3, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0x7f, 0xff, 0x83, 0xf3, 0x27, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xe7, 0xdf, 0xff, 0xff, 0xff, 0xce, 0x3f, 0xfe, 0xe4, 0x88, 0x70, 0x20, 0xa0, 0xe0, 0xe8, 0xe0, 0xf6, 0xff, 0xfe, 0xc7, 0x73, 0xfb, 0xf9, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0xfd, 0xfb, 0xff, 0xeb, 0xdf, 0xea, 0xe5, 0xbf, 0xff, 0xfb, 0xd7, 0x7f, 0x8d, 0xce, 0xdf, 0xcd, 0xfb, 0x5f, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xfc, 0xf1, 0xc5, 0x0f, 0x5e, 0xf8, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 
};

extern const unsigned char solid_pattern[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
extern const unsigned char checkered_pattern[] = {
    0b10101010,
    0b01010101,
    0b10101010,
    0b01010101,
    0b10101010,
    0b01010101,
    0b10101010,
    0b01010101,
};

unsigned char almost_solid_pattern[] = {
  0b10101010,
  0b11011101,
  0b10101010,
  0b01110111,
  0b10101010,
  0b11011101,
  0b10101010,
  0b01110111,
};

unsigned char star_pattern[] = {
  0b10101010,
  0b01000100,
  0b10101010,
  0b01000100,
  0b10101010,
  0b01000100,
  0b10101010,
  0b01000100,
};

unsigned char sparse_pattern[] = {
  0b00100010,
  0b00000000,
  0b10001000,
  0b00000000,
  0b00100010,
  0b00000000,
  0b10001000,
  0b00000000,
};

const uint8_t PROGMEM treeSmall[] = {
    8,
    16,
    0x00,
    0x40,
    0xc0,
    0xb0,
    0xf0,
    0xe0,
    0xc0,
    0x00,
    0x00,
    0x01,
    0x05,
    0x03,
    0x0b,
    0x03,
    0x04,
    0x01,
};

const uint8_t PROGMEM treeSmallMask[] = {
    0x80,
    0xe0,
    0xf0,
    0xf0,
    0xf0,
    0xf0,
    0xe0,
    0xc0,
    0x07,
    0x8f,
    0xdf,
    0xff,
    0xff,
    0xff,
    0xdf,
    0x0f,
};

void draw_patterned_hline(int x, int y, int w, const unsigned char *pattern)
{
  unsigned char p = pattern[y & 7];

  if (y < 0 || y >= height || w <= 0)
  {
    return;
  }

  for (unsigned char i = max(0, x); i < x + w && i < width; i++)
  {
    unsigned char m = 1 << (i & 7);

    if (p & m)
    {
      arduboy.drawPixel(i, y);
    }
  }
}

void draw_segment(int x1, int y1, int w1, int x2, int y2, int w2, unsigned char index)
{

  float Wd = (float)((w2 - w1) / 2) / (float)(y1 - y2);
  float Xd = (float)(x2 - x1) / (float)(y1 - y2);

  float x = x1;
  float w = w1 / 2;

  char drawLanes = index % 10 < 3;

  const unsigned char *grassPattern = (index % 10) < 5 ? checkered_pattern : almost_solid_pattern;

  for (int y = y1; y >= y2; y--)
  {

    int rumbleWidth = (float)w * 0.15; // 1 / 6
    int lineWidth = (float)w * 0.1;    // 1 / 24
    int rumbleLeft = x - w - rumbleWidth;
    int rumbleRight = x + w;
    int laneOffset = w * 0.33;

    // rumble strips
    draw_patterned_hline(rumbleLeft, y, rumbleWidth, solid_pattern);
    draw_patterned_hline(rumbleRight, y, rumbleWidth, solid_pattern);

    // grass
    draw_patterned_hline(0, y, x - w, grassPattern);
    draw_patterned_hline(x + w, y, width - x - w, grassPattern);

    // lane markers
    if (drawLanes)
    {
      draw_patterned_hline(x - laneOffset - lineWidth / 2, y, lineWidth, solid_pattern);
      draw_patterned_hline(x + laneOffset - lineWidth / 2, y, lineWidth, solid_pattern);
    }

    x += Xd;
    w += Wd;
  }
}

void draw_sprite(
    unsigned char width,
    unsigned char height,
    int roadWidth,
    unsigned char type,
    float scale,
    unsigned char destX,
    unsigned char destY)
{
  Sprites::drawExternalMask(destX - 4, destY - 16, treeSmall, treeSmallMask, 0, 0);
}

void draw_background() {
  Sprites::drawSelfMasked(0, 0,mountains, 0);
}